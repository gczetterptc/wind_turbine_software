// === FILESYS.PSEUDO ===
// Module: SimpleFileSystem

class File {
    String name
    Integer size
    DateTime created
    Byte[] data

    function write(Byte[] newData) {
        data = newData
        size = length(newData)
    }

    function read() -> Byte[] {
        return data
    }
}

class Directory {
    String name
    List<File> files
    List<Directory> subDirs

    function addFile(File f) {
        files.append(f)
    }

    function addDirectory(Directory d) {
        subDirs.append(d)
    }

    function listContents() -> String[] {
        names = []
        for file in files {
            names.append(file.name)
        }
        for dir in subDirs {
            names.append(dir.name + "/")
        }
        return names
    }
}

class FileSystem {
    Directory root

    function initialize() {
        root = new Directory(name="root")
    }

    function createFile(path: String, name: String, data: Byte[]) {
        dir = navigateTo(path)
        newFile = new File(name=name, data=data, size=length(data))
        dir.addFile(newFile)
    }

    function readFile(path: String, name: String) -> Byte[] {
        dir = navigateTo(path)
        for file in dir.files {
            if file.name == name {
                return file.read()
            }
        }
        throw FileNotFoundError(name)
    }

    function navigateTo(path: String) -> Directory {
        current = root
        parts = split(path, "/")
        for part in parts {
            if part == "" continue
            found = false
            for dir in current.subDirs {
                if dir.name == part {
                    current = dir
                    found = true
                    break
                }
            }
            if not found {
                throw DirectoryNotFoundError(part)
            }
        }
        return current
    }
}
